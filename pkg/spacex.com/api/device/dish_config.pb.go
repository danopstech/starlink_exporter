// Code generated by protoc-gen-go. DO NOT EDIT.
// source: spacex/api/device/dish_config.proto

package device

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DishConfig_SnowMeltMode int32

const (
	DishConfig_AUTO       DishConfig_SnowMeltMode = 0
	DishConfig_ALWAYS_ON  DishConfig_SnowMeltMode = 1
	DishConfig_ALWAYS_OFF DishConfig_SnowMeltMode = 2
)

var DishConfig_SnowMeltMode_name = map[int32]string{
	0: "AUTO",
	1: "ALWAYS_ON",
	2: "ALWAYS_OFF",
}

var DishConfig_SnowMeltMode_value = map[string]int32{
	"AUTO":       0,
	"ALWAYS_ON":  1,
	"ALWAYS_OFF": 2,
}

func (x DishConfig_SnowMeltMode) String() string {
	return proto.EnumName(DishConfig_SnowMeltMode_name, int32(x))
}

func (DishConfig_SnowMeltMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f782e6cda77b1c73, []int{0, 0}
}

type DishConfig struct {
	SnowMeltMode         DishConfig_SnowMeltMode `protobuf:"varint,1,opt,name=snow_melt_mode,json=snowMeltMode,proto3,enum=SpaceX.API.Device.DishConfig_SnowMeltMode" json:"snow_melt_mode,omitempty"`
	ApplySnowMeltMode    bool                    `protobuf:"varint,1001,opt,name=apply_snow_melt_mode,json=applySnowMeltMode,proto3" json:"apply_snow_melt_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *DishConfig) Reset()         { *m = DishConfig{} }
func (m *DishConfig) String() string { return proto.CompactTextString(m) }
func (*DishConfig) ProtoMessage()    {}
func (*DishConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_f782e6cda77b1c73, []int{0}
}

func (m *DishConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DishConfig.Unmarshal(m, b)
}
func (m *DishConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DishConfig.Marshal(b, m, deterministic)
}
func (m *DishConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DishConfig.Merge(m, src)
}
func (m *DishConfig) XXX_Size() int {
	return xxx_messageInfo_DishConfig.Size(m)
}
func (m *DishConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DishConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DishConfig proto.InternalMessageInfo

func (m *DishConfig) GetSnowMeltMode() DishConfig_SnowMeltMode {
	if m != nil {
		return m.SnowMeltMode
	}
	return DishConfig_AUTO
}

func (m *DishConfig) GetApplySnowMeltMode() bool {
	if m != nil {
		return m.ApplySnowMeltMode
	}
	return false
}

func init() {
	proto.RegisterEnum("SpaceX.API.Device.DishConfig_SnowMeltMode", DishConfig_SnowMeltMode_name, DishConfig_SnowMeltMode_value)
	proto.RegisterType((*DishConfig)(nil), "SpaceX.API.Device.DishConfig")
}

func init() {
	proto.RegisterFile("spacex/api/device/dish_config.proto", fileDescriptor_f782e6cda77b1c73)
}

var fileDescriptor_f782e6cda77b1c73 = []byte{
	// 220 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2e, 0x2e, 0x48, 0x4c,
	0x4e, 0xad, 0xd0, 0x4f, 0x2c, 0xc8, 0xd4, 0x4f, 0x49, 0x2d, 0xcb, 0x4c, 0x4e, 0xd5, 0x4f, 0xc9,
	0x2c, 0xce, 0x88, 0x4f, 0xce, 0xcf, 0x4b, 0xcb, 0x4c, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x12, 0x0c, 0x06, 0x29, 0x8a, 0xd0, 0x73, 0x0c, 0xf0, 0xd4, 0x73, 0x01, 0x2b, 0x52, 0x3a, 0xc9,
	0xc8, 0xc5, 0xe5, 0x92, 0x59, 0x9c, 0xe1, 0x0c, 0x56, 0x27, 0x14, 0xc0, 0xc5, 0x57, 0x9c, 0x97,
	0x5f, 0x1e, 0x9f, 0x9b, 0x9a, 0x53, 0x12, 0x9f, 0x9b, 0x9f, 0x92, 0x2a, 0xc1, 0xa8, 0xc0, 0xa8,
	0xc1, 0x67, 0xa4, 0xa5, 0x87, 0xa1, 0x55, 0x0f, 0xa1, 0x4d, 0x2f, 0x38, 0x2f, 0xbf, 0xdc, 0x37,
	0x35, 0xa7, 0xc4, 0x37, 0x3f, 0x25, 0x35, 0x88, 0xa7, 0x18, 0x89, 0x27, 0x64, 0xc0, 0x25, 0x92,
	0x58, 0x50, 0x90, 0x53, 0x19, 0x8f, 0x66, 0xee, 0x4b, 0x76, 0x05, 0x46, 0x0d, 0x8e, 0x20, 0x41,
	0xb0, 0x24, 0xb2, 0x7e, 0x25, 0x73, 0x2e, 0x1e, 0x64, 0xbe, 0x10, 0x07, 0x17, 0x8b, 0x63, 0x68,
	0x88, 0xbf, 0x00, 0x83, 0x10, 0x2f, 0x17, 0xa7, 0xa3, 0x4f, 0xb8, 0x63, 0x64, 0x70, 0xbc, 0xbf,
	0x9f, 0x00, 0xa3, 0x10, 0x1f, 0x17, 0x17, 0x8c, 0xeb, 0xe6, 0x26, 0xc0, 0xe4, 0x24, 0x1e, 0x25,
	0x0a, 0x09, 0x05, 0xbd, 0xe4, 0xfc, 0x5c, 0xa4, 0x90, 0x48, 0x62, 0x03, 0x7b, 0xdf, 0x18, 0x10,
	0x00, 0x00, 0xff, 0xff, 0x0b, 0x50, 0x52, 0xfd, 0x25, 0x01, 0x00, 0x00,
}
