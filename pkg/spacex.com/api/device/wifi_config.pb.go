// Code generated by protoc-gen-go. DO NOT EDIT.
// source: spacex/api/device/wifi_config.proto

package device

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MeshAuth int32

const (
	MeshAuth_MESH_AUTH_UNKNOWN   MeshAuth = 0
	MeshAuth_MESH_AUTH_NEW       MeshAuth = 1
	MeshAuth_MESH_AUTH_TRUSTED   MeshAuth = 2
	MeshAuth_MESH_AUTH_UNTRUSTED MeshAuth = 3
)

var MeshAuth_name = map[int32]string{
	0: "MESH_AUTH_UNKNOWN",
	1: "MESH_AUTH_NEW",
	2: "MESH_AUTH_TRUSTED",
	3: "MESH_AUTH_UNTRUSTED",
}

var MeshAuth_value = map[string]int32{
	"MESH_AUTH_UNKNOWN":   0,
	"MESH_AUTH_NEW":       1,
	"MESH_AUTH_TRUSTED":   2,
	"MESH_AUTH_UNTRUSTED": 3,
}

func (x MeshAuth) String() string {
	return proto.EnumName(MeshAuth_name, int32(x))
}

func (MeshAuth) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_63938ee7483f9ada, []int{0}
}

type WifiConfig_Security int32

const (
	WifiConfig_UNKNOWN  WifiConfig_Security = 0
	WifiConfig_WPA2     WifiConfig_Security = 1
	WifiConfig_WPA3     WifiConfig_Security = 2
	WifiConfig_WPA2WPA3 WifiConfig_Security = 3
)

var WifiConfig_Security_name = map[int32]string{
	0: "UNKNOWN",
	1: "WPA2",
	2: "WPA3",
	3: "WPA2WPA3",
}

var WifiConfig_Security_value = map[string]int32{
	"UNKNOWN":  0,
	"WPA2":     1,
	"WPA3":     2,
	"WPA2WPA3": 3,
}

func (x WifiConfig_Security) String() string {
	return proto.EnumName(WifiConfig_Security_name, int32(x))
}

func (WifiConfig_Security) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_63938ee7483f9ada, []int{1, 0}
}

type WifiConfig_Band int32

const (
	WifiConfig_RF_UNKNOWN WifiConfig_Band = 0
	WifiConfig_RF_2GHZ    WifiConfig_Band = 2
	WifiConfig_RF_5GHZ    WifiConfig_Band = 5
)

var WifiConfig_Band_name = map[int32]string{
	0: "RF_UNKNOWN",
	2: "RF_2GHZ",
	5: "RF_5GHZ",
}

var WifiConfig_Band_value = map[string]int32{
	"RF_UNKNOWN": 0,
	"RF_2GHZ":    2,
	"RF_5GHZ":    5,
}

func (x WifiConfig_Band) String() string {
	return proto.EnumName(WifiConfig_Band_name, int32(x))
}

func (WifiConfig_Band) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_63938ee7483f9ada, []int{1, 1}
}

type WifiConfig_WirelessMode int32

const (
	WifiConfig_WIRELESS_MODE_DEFAULT WifiConfig_WirelessMode = 0
	WifiConfig_A_ONLY                WifiConfig_WirelessMode = 1
	WifiConfig_B_ONLY                WifiConfig_WirelessMode = 2
	WifiConfig_G_ONLY                WifiConfig_WirelessMode = 3
	WifiConfig_N_ONLY                WifiConfig_WirelessMode = 4
	WifiConfig_B_G_MIXED             WifiConfig_WirelessMode = 5
	WifiConfig_A_N_MIXED             WifiConfig_WirelessMode = 6
	WifiConfig_G_N_MIXED             WifiConfig_WirelessMode = 7
	WifiConfig_B_G_N_MIXED           WifiConfig_WirelessMode = 8
	WifiConfig_A_AN_AC_MIXED         WifiConfig_WirelessMode = 9
	WifiConfig_AN_AC_MIXED           WifiConfig_WirelessMode = 10
	WifiConfig_B_G_N_AX_MIXED        WifiConfig_WirelessMode = 11
	WifiConfig_A_AN_AC_AX_MIXED      WifiConfig_WirelessMode = 12
)

var WifiConfig_WirelessMode_name = map[int32]string{
	0:  "WIRELESS_MODE_DEFAULT",
	1:  "A_ONLY",
	2:  "B_ONLY",
	3:  "G_ONLY",
	4:  "N_ONLY",
	5:  "B_G_MIXED",
	6:  "A_N_MIXED",
	7:  "G_N_MIXED",
	8:  "B_G_N_MIXED",
	9:  "A_AN_AC_MIXED",
	10: "AN_AC_MIXED",
	11: "B_G_N_AX_MIXED",
	12: "A_AN_AC_AX_MIXED",
}

var WifiConfig_WirelessMode_value = map[string]int32{
	"WIRELESS_MODE_DEFAULT": 0,
	"A_ONLY":                1,
	"B_ONLY":                2,
	"G_ONLY":                3,
	"N_ONLY":                4,
	"B_G_MIXED":             5,
	"A_N_MIXED":             6,
	"G_N_MIXED":             7,
	"B_G_N_MIXED":           8,
	"A_AN_AC_MIXED":         9,
	"AN_AC_MIXED":           10,
	"B_G_N_AX_MIXED":        11,
	"A_AN_AC_AX_MIXED":      12,
}

func (x WifiConfig_WirelessMode) String() string {
	return proto.EnumName(WifiConfig_WirelessMode_name, int32(x))
}

func (WifiConfig_WirelessMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_63938ee7483f9ada, []int{1, 2}
}

type WifiConfig_HTBandwidth int32

const (
	WifiConfig_HT_BANDWIDTH_DEFAULT      WifiConfig_HTBandwidth = 0
	WifiConfig_HT_BANDWIDTH_20_MHZ       WifiConfig_HTBandwidth = 1
	WifiConfig_HT_BANDWIDTH_20_OR_40_MHZ WifiConfig_HTBandwidth = 2
)

var WifiConfig_HTBandwidth_name = map[int32]string{
	0: "HT_BANDWIDTH_DEFAULT",
	1: "HT_BANDWIDTH_20_MHZ",
	2: "HT_BANDWIDTH_20_OR_40_MHZ",
}

var WifiConfig_HTBandwidth_value = map[string]int32{
	"HT_BANDWIDTH_DEFAULT":      0,
	"HT_BANDWIDTH_20_MHZ":       1,
	"HT_BANDWIDTH_20_OR_40_MHZ": 2,
}

func (x WifiConfig_HTBandwidth) String() string {
	return proto.EnumName(WifiConfig_HTBandwidth_name, int32(x))
}

func (WifiConfig_HTBandwidth) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_63938ee7483f9ada, []int{1, 3}
}

type WifiConfig_VHTBandwidth int32

const (
	WifiConfig_VHT_BANDWIDTH_DEFAULT        WifiConfig_VHTBandwidth = 0
	WifiConfig_VHT_BANDWIDTH_DISABLED       WifiConfig_VHTBandwidth = 1
	WifiConfig_VHT_BANDWIDTH_80_MHZ         WifiConfig_VHTBandwidth = 2
	WifiConfig_VHT_BANDWIDTH_160_MHZ        WifiConfig_VHTBandwidth = 3
	WifiConfig_VHT_BANDWIDTH_80_PLUS_80_MHZ WifiConfig_VHTBandwidth = 4
)

var WifiConfig_VHTBandwidth_name = map[int32]string{
	0: "VHT_BANDWIDTH_DEFAULT",
	1: "VHT_BANDWIDTH_DISABLED",
	2: "VHT_BANDWIDTH_80_MHZ",
	3: "VHT_BANDWIDTH_160_MHZ",
	4: "VHT_BANDWIDTH_80_PLUS_80_MHZ",
}

var WifiConfig_VHTBandwidth_value = map[string]int32{
	"VHT_BANDWIDTH_DEFAULT":        0,
	"VHT_BANDWIDTH_DISABLED":       1,
	"VHT_BANDWIDTH_80_MHZ":         2,
	"VHT_BANDWIDTH_160_MHZ":        3,
	"VHT_BANDWIDTH_80_PLUS_80_MHZ": 4,
}

func (x WifiConfig_VHTBandwidth) String() string {
	return proto.EnumName(WifiConfig_VHTBandwidth_name, int32(x))
}

func (WifiConfig_VHTBandwidth) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_63938ee7483f9ada, []int{1, 4}
}

type MeshConfig struct {
	DisplayName          string   `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	ApplyDisplayName     bool     `protobuf:"varint,2,opt,name=apply_display_name,json=applyDisplayName,proto3" json:"apply_display_name,omitempty"`
	Auth                 MeshAuth `protobuf:"varint,3,opt,name=auth,proto3,enum=SpaceX.API.Device.MeshAuth" json:"auth,omitempty"`
	ApplyAuth            bool     `protobuf:"varint,4,opt,name=apply_auth,json=applyAuth,proto3" json:"apply_auth,omitempty"`
	LastConnected        int64    `protobuf:"varint,5,opt,name=last_connected,json=lastConnected,proto3" json:"last_connected,omitempty"`
	Incarnation          uint64   `protobuf:"varint,7,opt,name=incarnation,proto3" json:"incarnation,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeshConfig) Reset()         { *m = MeshConfig{} }
func (m *MeshConfig) String() string { return proto.CompactTextString(m) }
func (*MeshConfig) ProtoMessage()    {}
func (*MeshConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_63938ee7483f9ada, []int{0}
}

func (m *MeshConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshConfig.Unmarshal(m, b)
}
func (m *MeshConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshConfig.Marshal(b, m, deterministic)
}
func (m *MeshConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshConfig.Merge(m, src)
}
func (m *MeshConfig) XXX_Size() int {
	return xxx_messageInfo_MeshConfig.Size(m)
}
func (m *MeshConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MeshConfig proto.InternalMessageInfo

func (m *MeshConfig) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *MeshConfig) GetApplyDisplayName() bool {
	if m != nil {
		return m.ApplyDisplayName
	}
	return false
}

func (m *MeshConfig) GetAuth() MeshAuth {
	if m != nil {
		return m.Auth
	}
	return MeshAuth_MESH_AUTH_UNKNOWN
}

func (m *MeshConfig) GetApplyAuth() bool {
	if m != nil {
		return m.ApplyAuth
	}
	return false
}

func (m *MeshConfig) GetLastConnected() int64 {
	if m != nil {
		return m.LastConnected
	}
	return 0
}

func (m *MeshConfig) GetIncarnation() uint64 {
	if m != nil {
		return m.Incarnation
	}
	return 0
}

type WifiConfig struct {
	CountryCode            string                  `protobuf:"bytes,3,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	SetupComplete          bool                    `protobuf:"varint,7,opt,name=setup_complete,json=setupComplete,proto3" json:"setup_complete,omitempty"`
	ApplySetupComplete     bool                    `protobuf:"varint,1010,opt,name=apply_setup_complete,json=applySetupComplete,proto3" json:"apply_setup_complete,omitempty"`
	Version                uint32                  `protobuf:"varint,9,opt,name=version,proto3" json:"version,omitempty"`
	MacWan                 string                  `protobuf:"bytes,12,opt,name=mac_wan,json=macWan,proto3" json:"mac_wan,omitempty"` // Deprecated: Do not use.
	MacLan                 string                  `protobuf:"bytes,13,opt,name=mac_lan,json=macLan,proto3" json:"mac_lan,omitempty"` // Deprecated: Do not use.
	Channel_2Ghz           uint32                  `protobuf:"varint,19,opt,name=channel_2ghz,json=channel2ghz,proto3" json:"channel_2ghz,omitempty"`
	ApplyChannel_2Ghz      bool                    `protobuf:"varint,1013,opt,name=apply_channel_2ghz,json=applyChannel2ghz,proto3" json:"apply_channel_2ghz,omitempty"`
	Channel_5Ghz           uint32                  `protobuf:"varint,20,opt,name=channel_5ghz,json=channel5ghz,proto3" json:"channel_5ghz,omitempty"`
	ApplyChannel_5Ghz      bool                    `protobuf:"varint,1014,opt,name=apply_channel_5ghz,json=applyChannel5ghz,proto3" json:"apply_channel_5ghz,omitempty"`
	MeshConfigs            map[string]*MeshConfig  `protobuf:"bytes,33,rep,name=mesh_configs,json=meshConfigs,proto3" json:"mesh_configs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MeshConfigsUpdates     map[string]*MeshConfig  `protobuf:"bytes,3033,rep,name=mesh_configs_updates,json=meshConfigsUpdates,proto3" json:"mesh_configs_updates,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ApplyMeshConfigs       bool                    `protobuf:"varint,1033,opt,name=apply_mesh_configs,json=applyMeshConfigs,proto3" json:"apply_mesh_configs,omitempty"`
	DynamicKeys            []*PublicKey            `protobuf:"bytes,22,rep,name=dynamic_keys,json=dynamicKeys,proto3" json:"dynamic_keys,omitempty"`
	ApplyDynamicKeys       bool                    `protobuf:"varint,39,opt,name=apply_dynamic_keys,json=applyDynamicKeys,proto3" json:"apply_dynamic_keys,omitempty"`
	IsRepeater             bool                    `protobuf:"varint,23,opt,name=is_repeater,json=isRepeater,proto3" json:"is_repeater,omitempty"`
	ApplyIsRepeater        bool                    `protobuf:"varint,1031,opt,name=apply_is_repeater,json=applyIsRepeater,proto3" json:"apply_is_repeater,omitempty"`
	BootCount              int32                   `protobuf:"varint,26,opt,name=boot_count,json=bootCount,proto3" json:"boot_count,omitempty"`
	Boot                   *BootInfo               `protobuf:"bytes,3001,opt,name=boot,proto3" json:"boot,omitempty"`
	Nameservers            []string                `protobuf:"bytes,30,rep,name=nameservers,proto3" json:"nameservers,omitempty"`
	ApplyNameservers       bool                    `protobuf:"varint,1054,opt,name=apply_nameservers,json=applyNameservers,proto3" json:"apply_nameservers,omitempty"`
	BypassMode             bool                    `protobuf:"varint,31,opt,name=bypass_mode,json=bypassMode,proto3" json:"bypass_mode,omitempty"`
	ApplyBypassMode        bool                    `protobuf:"varint,1055,opt,name=apply_bypass_mode,json=applyBypassMode,proto3" json:"apply_bypass_mode,omitempty"`
	DfsEnabled             bool                    `protobuf:"varint,42,opt,name=dfs_enabled,json=dfsEnabled,proto3" json:"dfs_enabled,omitempty"`
	ApplyDfsEnabled        bool                    `protobuf:"varint,1058,opt,name=apply_dfs_enabled,json=applyDfsEnabled,proto3" json:"apply_dfs_enabled,omitempty"`
	Networks               []*WifiConfig_Network   `protobuf:"bytes,1100,rep,name=networks,proto3" json:"networks,omitempty"`
	ApplyNetworks          bool                    `protobuf:"varint,1101,opt,name=apply_networks,json=applyNetworks,proto3" json:"apply_networks,omitempty"`
	NetworkName            string                  `protobuf:"bytes,1,opt,name=network_name,json=networkName,proto3" json:"network_name,omitempty"`                                                 // Deprecated: Do not use.
	ApplyNetworkName       bool                    `protobuf:"varint,1001,opt,name=apply_network_name,json=applyNetworkName,proto3" json:"apply_network_name,omitempty"`                            // Deprecated: Do not use.
	NetworkPassword        string                  `protobuf:"bytes,2,opt,name=network_password,json=networkPassword,proto3" json:"network_password,omitempty"`                                     // Deprecated: Do not use.
	ApplyNetworkPassword   bool                    `protobuf:"varint,1002,opt,name=apply_network_password,json=applyNetworkPassword,proto3" json:"apply_network_password,omitempty"`                // Deprecated: Do not use.
	LanIpv4                string                  `protobuf:"bytes,5,opt,name=lan_ipv4,json=lanIpv4,proto3" json:"lan_ipv4,omitempty"`                                                             // Deprecated: Do not use.
	ApplyLanIpv4           bool                    `protobuf:"varint,37,opt,name=apply_lan_ipv4,json=applyLanIpv4,proto3" json:"apply_lan_ipv4,omitempty"`                                          // Deprecated: Do not use.
	WifiSecurity           WifiConfig_Security     `protobuf:"varint,10,opt,name=wifi_security,json=wifiSecurity,proto3,enum=SpaceX.API.Device.WifiConfig_Security" json:"wifi_security,omitempty"` // Deprecated: Do not use.
	ApplyWifiSecurity      bool                    `protobuf:"varint,1004,opt,name=apply_wifi_security,json=applyWifiSecurity,proto3" json:"apply_wifi_security,omitempty"`                         // Deprecated: Do not use.
	NetworkName_5Ghz       string                  `protobuf:"bytes,11,opt,name=network_name_5ghz,json=networkName5ghz,proto3" json:"network_name_5ghz,omitempty"`                                  // Deprecated: Do not use.
	ApplyNetworkName_5Ghz  bool                    `protobuf:"varint,1005,opt,name=apply_network_name_5ghz,json=applyNetworkName5ghz,proto3" json:"apply_network_name_5ghz,omitempty"`              // Deprecated: Do not use.
	EnableRemoteSsh        bool                    `protobuf:"varint,34,opt,name=enable_remote_ssh,json=enableRemoteSsh,proto3" json:"enable_remote_ssh,omitempty"`
	ApplyEnableRemoteSsh   bool                    `protobuf:"varint,1057,opt,name=apply_enable_remote_ssh,json=applyEnableRemoteSsh,proto3" json:"apply_enable_remote_ssh,omitempty"`
	LastRemoteSshAccess    int64                   `protobuf:"varint,35,opt,name=last_remote_ssh_access,json=lastRemoteSshAccess,proto3" json:"last_remote_ssh_access,omitempty"`
	Incarnation            uint64                  `protobuf:"varint,43,opt,name=incarnation,proto3" json:"incarnation,omitempty"`
	WirelessMode_2Ghz      WifiConfig_WirelessMode `protobuf:"varint,44,opt,name=wireless_mode_2ghz,json=wirelessMode2ghz,proto3,enum=SpaceX.API.Device.WifiConfig_WirelessMode" json:"wireless_mode_2ghz,omitempty"`
	ApplyWirelessMode_2Ghz bool                    `protobuf:"varint,1059,opt,name=apply_wireless_mode_2ghz,json=applyWirelessMode2ghz,proto3" json:"apply_wireless_mode_2ghz,omitempty"`
	WirelessMode_5Ghz      WifiConfig_WirelessMode `protobuf:"varint,45,opt,name=wireless_mode_5ghz,json=wirelessMode5ghz,proto3,enum=SpaceX.API.Device.WifiConfig_WirelessMode" json:"wireless_mode_5ghz,omitempty"`
	ApplyWirelessMode_5Ghz bool                    `protobuf:"varint,1060,opt,name=apply_wireless_mode_5ghz,json=applyWirelessMode5ghz,proto3" json:"apply_wireless_mode_5ghz,omitempty"`
	HtBandwidth_2Ghz       WifiConfig_HTBandwidth  `protobuf:"varint,46,opt,name=ht_bandwidth_2ghz,json=htBandwidth2ghz,proto3,enum=SpaceX.API.Device.WifiConfig_HTBandwidth" json:"ht_bandwidth_2ghz,omitempty"`
	ApplyHtBandwidth_2Ghz  bool                    `protobuf:"varint,1061,opt,name=apply_ht_bandwidth_2ghz,json=applyHtBandwidth2ghz,proto3" json:"apply_ht_bandwidth_2ghz,omitempty"`
	HtBandwidth_5Ghz       WifiConfig_HTBandwidth  `protobuf:"varint,47,opt,name=ht_bandwidth_5ghz,json=htBandwidth5ghz,proto3,enum=SpaceX.API.Device.WifiConfig_HTBandwidth" json:"ht_bandwidth_5ghz,omitempty"`
	ApplyHtBandwidth_5Ghz  bool                    `protobuf:"varint,1062,opt,name=apply_ht_bandwidth_5ghz,json=applyHtBandwidth5ghz,proto3" json:"apply_ht_bandwidth_5ghz,omitempty"`
	VhtBandwidth           WifiConfig_VHTBandwidth `protobuf:"varint,48,opt,name=vht_bandwidth,json=vhtBandwidth,proto3,enum=SpaceX.API.Device.WifiConfig_VHTBandwidth" json:"vht_bandwidth,omitempty"`
	ApplyVhtBandwidth      bool                    `protobuf:"varint,1063,opt,name=apply_vht_bandwidth,json=applyVhtBandwidth,proto3" json:"apply_vht_bandwidth,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                `json:"-"`
	XXX_unrecognized       []byte                  `json:"-"`
	XXX_sizecache          int32                   `json:"-"`
}

func (m *WifiConfig) Reset()         { *m = WifiConfig{} }
func (m *WifiConfig) String() string { return proto.CompactTextString(m) }
func (*WifiConfig) ProtoMessage()    {}
func (*WifiConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_63938ee7483f9ada, []int{1}
}

func (m *WifiConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WifiConfig.Unmarshal(m, b)
}
func (m *WifiConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WifiConfig.Marshal(b, m, deterministic)
}
func (m *WifiConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WifiConfig.Merge(m, src)
}
func (m *WifiConfig) XXX_Size() int {
	return xxx_messageInfo_WifiConfig.Size(m)
}
func (m *WifiConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_WifiConfig.DiscardUnknown(m)
}

var xxx_messageInfo_WifiConfig proto.InternalMessageInfo

func (m *WifiConfig) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *WifiConfig) GetSetupComplete() bool {
	if m != nil {
		return m.SetupComplete
	}
	return false
}

func (m *WifiConfig) GetApplySetupComplete() bool {
	if m != nil {
		return m.ApplySetupComplete
	}
	return false
}

func (m *WifiConfig) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// Deprecated: Do not use.
func (m *WifiConfig) GetMacWan() string {
	if m != nil {
		return m.MacWan
	}
	return ""
}

// Deprecated: Do not use.
func (m *WifiConfig) GetMacLan() string {
	if m != nil {
		return m.MacLan
	}
	return ""
}

func (m *WifiConfig) GetChannel_2Ghz() uint32 {
	if m != nil {
		return m.Channel_2Ghz
	}
	return 0
}

func (m *WifiConfig) GetApplyChannel_2Ghz() bool {
	if m != nil {
		return m.ApplyChannel_2Ghz
	}
	return false
}

func (m *WifiConfig) GetChannel_5Ghz() uint32 {
	if m != nil {
		return m.Channel_5Ghz
	}
	return 0
}

func (m *WifiConfig) GetApplyChannel_5Ghz() bool {
	if m != nil {
		return m.ApplyChannel_5Ghz
	}
	return false
}

func (m *WifiConfig) GetMeshConfigs() map[string]*MeshConfig {
	if m != nil {
		return m.MeshConfigs
	}
	return nil
}

func (m *WifiConfig) GetMeshConfigsUpdates() map[string]*MeshConfig {
	if m != nil {
		return m.MeshConfigsUpdates
	}
	return nil
}

func (m *WifiConfig) GetApplyMeshConfigs() bool {
	if m != nil {
		return m.ApplyMeshConfigs
	}
	return false
}

func (m *WifiConfig) GetDynamicKeys() []*PublicKey {
	if m != nil {
		return m.DynamicKeys
	}
	return nil
}

func (m *WifiConfig) GetApplyDynamicKeys() bool {
	if m != nil {
		return m.ApplyDynamicKeys
	}
	return false
}

func (m *WifiConfig) GetIsRepeater() bool {
	if m != nil {
		return m.IsRepeater
	}
	return false
}

func (m *WifiConfig) GetApplyIsRepeater() bool {
	if m != nil {
		return m.ApplyIsRepeater
	}
	return false
}

func (m *WifiConfig) GetBootCount() int32 {
	if m != nil {
		return m.BootCount
	}
	return 0
}

func (m *WifiConfig) GetBoot() *BootInfo {
	if m != nil {
		return m.Boot
	}
	return nil
}

func (m *WifiConfig) GetNameservers() []string {
	if m != nil {
		return m.Nameservers
	}
	return nil
}

func (m *WifiConfig) GetApplyNameservers() bool {
	if m != nil {
		return m.ApplyNameservers
	}
	return false
}

func (m *WifiConfig) GetBypassMode() bool {
	if m != nil {
		return m.BypassMode
	}
	return false
}

func (m *WifiConfig) GetApplyBypassMode() bool {
	if m != nil {
		return m.ApplyBypassMode
	}
	return false
}

func (m *WifiConfig) GetDfsEnabled() bool {
	if m != nil {
		return m.DfsEnabled
	}
	return false
}

func (m *WifiConfig) GetApplyDfsEnabled() bool {
	if m != nil {
		return m.ApplyDfsEnabled
	}
	return false
}

func (m *WifiConfig) GetNetworks() []*WifiConfig_Network {
	if m != nil {
		return m.Networks
	}
	return nil
}

func (m *WifiConfig) GetApplyNetworks() bool {
	if m != nil {
		return m.ApplyNetworks
	}
	return false
}

// Deprecated: Do not use.
func (m *WifiConfig) GetNetworkName() string {
	if m != nil {
		return m.NetworkName
	}
	return ""
}

// Deprecated: Do not use.
func (m *WifiConfig) GetApplyNetworkName() bool {
	if m != nil {
		return m.ApplyNetworkName
	}
	return false
}

// Deprecated: Do not use.
func (m *WifiConfig) GetNetworkPassword() string {
	if m != nil {
		return m.NetworkPassword
	}
	return ""
}

// Deprecated: Do not use.
func (m *WifiConfig) GetApplyNetworkPassword() bool {
	if m != nil {
		return m.ApplyNetworkPassword
	}
	return false
}

// Deprecated: Do not use.
func (m *WifiConfig) GetLanIpv4() string {
	if m != nil {
		return m.LanIpv4
	}
	return ""
}

// Deprecated: Do not use.
func (m *WifiConfig) GetApplyLanIpv4() bool {
	if m != nil {
		return m.ApplyLanIpv4
	}
	return false
}

// Deprecated: Do not use.
func (m *WifiConfig) GetWifiSecurity() WifiConfig_Security {
	if m != nil {
		return m.WifiSecurity
	}
	return WifiConfig_UNKNOWN
}

// Deprecated: Do not use.
func (m *WifiConfig) GetApplyWifiSecurity() bool {
	if m != nil {
		return m.ApplyWifiSecurity
	}
	return false
}

// Deprecated: Do not use.
func (m *WifiConfig) GetNetworkName_5Ghz() string {
	if m != nil {
		return m.NetworkName_5Ghz
	}
	return ""
}

// Deprecated: Do not use.
func (m *WifiConfig) GetApplyNetworkName_5Ghz() bool {
	if m != nil {
		return m.ApplyNetworkName_5Ghz
	}
	return false
}

func (m *WifiConfig) GetEnableRemoteSsh() bool {
	if m != nil {
		return m.EnableRemoteSsh
	}
	return false
}

func (m *WifiConfig) GetApplyEnableRemoteSsh() bool {
	if m != nil {
		return m.ApplyEnableRemoteSsh
	}
	return false
}

func (m *WifiConfig) GetLastRemoteSshAccess() int64 {
	if m != nil {
		return m.LastRemoteSshAccess
	}
	return 0
}

func (m *WifiConfig) GetIncarnation() uint64 {
	if m != nil {
		return m.Incarnation
	}
	return 0
}

func (m *WifiConfig) GetWirelessMode_2Ghz() WifiConfig_WirelessMode {
	if m != nil {
		return m.WirelessMode_2Ghz
	}
	return WifiConfig_WIRELESS_MODE_DEFAULT
}

func (m *WifiConfig) GetApplyWirelessMode_2Ghz() bool {
	if m != nil {
		return m.ApplyWirelessMode_2Ghz
	}
	return false
}

func (m *WifiConfig) GetWirelessMode_5Ghz() WifiConfig_WirelessMode {
	if m != nil {
		return m.WirelessMode_5Ghz
	}
	return WifiConfig_WIRELESS_MODE_DEFAULT
}

func (m *WifiConfig) GetApplyWirelessMode_5Ghz() bool {
	if m != nil {
		return m.ApplyWirelessMode_5Ghz
	}
	return false
}

func (m *WifiConfig) GetHtBandwidth_2Ghz() WifiConfig_HTBandwidth {
	if m != nil {
		return m.HtBandwidth_2Ghz
	}
	return WifiConfig_HT_BANDWIDTH_DEFAULT
}

func (m *WifiConfig) GetApplyHtBandwidth_2Ghz() bool {
	if m != nil {
		return m.ApplyHtBandwidth_2Ghz
	}
	return false
}

func (m *WifiConfig) GetHtBandwidth_5Ghz() WifiConfig_HTBandwidth {
	if m != nil {
		return m.HtBandwidth_5Ghz
	}
	return WifiConfig_HT_BANDWIDTH_DEFAULT
}

func (m *WifiConfig) GetApplyHtBandwidth_5Ghz() bool {
	if m != nil {
		return m.ApplyHtBandwidth_5Ghz
	}
	return false
}

func (m *WifiConfig) GetVhtBandwidth() WifiConfig_VHTBandwidth {
	if m != nil {
		return m.VhtBandwidth
	}
	return WifiConfig_VHT_BANDWIDTH_DEFAULT
}

func (m *WifiConfig) GetApplyVhtBandwidth() bool {
	if m != nil {
		return m.ApplyVhtBandwidth
	}
	return false
}

type WifiConfig_BasicServiceSet struct {
	Bssid string `protobuf:"bytes,1003,opt,name=bssid,proto3" json:"bssid,omitempty"`
	Ssid  string `protobuf:"bytes,1005,opt,name=ssid,proto3" json:"ssid,omitempty"`
	// Types that are valid to be assigned to Auth:
	//	*WifiConfig_BasicServiceSet_AuthOpen
	//	*WifiConfig_BasicServiceSet_AuthWpa2
	//	*WifiConfig_BasicServiceSet_AuthWpa3
	//	*WifiConfig_BasicServiceSet_AuthWpa2Wpa3
	//	*WifiConfig_BasicServiceSet_AuthRadius
	Auth                 isWifiConfig_BasicServiceSet_Auth `protobuf_oneof:"auth"`
	Band                 WifiConfig_Band                   `protobuf:"varint,1011,opt,name=band,proto3,enum=SpaceX.API.Device.WifiConfig_Band" json:"band,omitempty"`
	Disable              bool                              `protobuf:"varint,1013,opt,name=disable,proto3" json:"disable,omitempty"`
	Hidden               bool                              `protobuf:"varint,1015,opt,name=hidden,proto3" json:"hidden,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *WifiConfig_BasicServiceSet) Reset()         { *m = WifiConfig_BasicServiceSet{} }
func (m *WifiConfig_BasicServiceSet) String() string { return proto.CompactTextString(m) }
func (*WifiConfig_BasicServiceSet) ProtoMessage()    {}
func (*WifiConfig_BasicServiceSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_63938ee7483f9ada, []int{1, 2}
}

func (m *WifiConfig_BasicServiceSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WifiConfig_BasicServiceSet.Unmarshal(m, b)
}
func (m *WifiConfig_BasicServiceSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WifiConfig_BasicServiceSet.Marshal(b, m, deterministic)
}
func (m *WifiConfig_BasicServiceSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WifiConfig_BasicServiceSet.Merge(m, src)
}
func (m *WifiConfig_BasicServiceSet) XXX_Size() int {
	return xxx_messageInfo_WifiConfig_BasicServiceSet.Size(m)
}
func (m *WifiConfig_BasicServiceSet) XXX_DiscardUnknown() {
	xxx_messageInfo_WifiConfig_BasicServiceSet.DiscardUnknown(m)
}

var xxx_messageInfo_WifiConfig_BasicServiceSet proto.InternalMessageInfo

func (m *WifiConfig_BasicServiceSet) GetBssid() string {
	if m != nil {
		return m.Bssid
	}
	return ""
}

func (m *WifiConfig_BasicServiceSet) GetSsid() string {
	if m != nil {
		return m.Ssid
	}
	return ""
}

type isWifiConfig_BasicServiceSet_Auth interface {
	isWifiConfig_BasicServiceSet_Auth()
}

type WifiConfig_BasicServiceSet_AuthOpen struct {
	AuthOpen *AuthOpen `protobuf:"bytes,2001,opt,name=auth_open,json=authOpen,proto3,oneof"`
}

type WifiConfig_BasicServiceSet_AuthWpa2 struct {
	AuthWpa2 *AuthWpa2 `protobuf:"bytes,2002,opt,name=auth_wpa2,json=authWpa2,proto3,oneof"`
}

type WifiConfig_BasicServiceSet_AuthWpa3 struct {
	AuthWpa3 *AuthWpa3 `protobuf:"bytes,2003,opt,name=auth_wpa3,json=authWpa3,proto3,oneof"`
}

type WifiConfig_BasicServiceSet_AuthWpa2Wpa3 struct {
	AuthWpa2Wpa3 *AuthWpa2Wpa3 `protobuf:"bytes,2004,opt,name=auth_wpa2_wpa3,json=authWpa2Wpa3,proto3,oneof"`
}

type WifiConfig_BasicServiceSet_AuthRadius struct {
	AuthRadius *AuthRadius `protobuf:"bytes,2005,opt,name=auth_radius,json=authRadius,proto3,oneof"`
}

func (*WifiConfig_BasicServiceSet_AuthOpen) isWifiConfig_BasicServiceSet_Auth() {}

func (*WifiConfig_BasicServiceSet_AuthWpa2) isWifiConfig_BasicServiceSet_Auth() {}

func (*WifiConfig_BasicServiceSet_AuthWpa3) isWifiConfig_BasicServiceSet_Auth() {}

func (*WifiConfig_BasicServiceSet_AuthWpa2Wpa3) isWifiConfig_BasicServiceSet_Auth() {}

func (*WifiConfig_BasicServiceSet_AuthRadius) isWifiConfig_BasicServiceSet_Auth() {}

func (m *WifiConfig_BasicServiceSet) GetAuth() isWifiConfig_BasicServiceSet_Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *WifiConfig_BasicServiceSet) GetAuthOpen() *AuthOpen {
	if x, ok := m.GetAuth().(*WifiConfig_BasicServiceSet_AuthOpen); ok {
		return x.AuthOpen
	}
	return nil
}

func (m *WifiConfig_BasicServiceSet) GetAuthWpa2() *AuthWpa2 {
	if x, ok := m.GetAuth().(*WifiConfig_BasicServiceSet_AuthWpa2); ok {
		return x.AuthWpa2
	}
	return nil
}

func (m *WifiConfig_BasicServiceSet) GetAuthWpa3() *AuthWpa3 {
	if x, ok := m.GetAuth().(*WifiConfig_BasicServiceSet_AuthWpa3); ok {
		return x.AuthWpa3
	}
	return nil
}

func (m *WifiConfig_BasicServiceSet) GetAuthWpa2Wpa3() *AuthWpa2Wpa3 {
	if x, ok := m.GetAuth().(*WifiConfig_BasicServiceSet_AuthWpa2Wpa3); ok {
		return x.AuthWpa2Wpa3
	}
	return nil
}

func (m *WifiConfig_BasicServiceSet) GetAuthRadius() *AuthRadius {
	if x, ok := m.GetAuth().(*WifiConfig_BasicServiceSet_AuthRadius); ok {
		return x.AuthRadius
	}
	return nil
}

func (m *WifiConfig_BasicServiceSet) GetBand() WifiConfig_Band {
	if m != nil {
		return m.Band
	}
	return WifiConfig_RF_UNKNOWN
}

func (m *WifiConfig_BasicServiceSet) GetDisable() bool {
	if m != nil {
		return m.Disable
	}
	return false
}

func (m *WifiConfig_BasicServiceSet) GetHidden() bool {
	if m != nil {
		return m.Hidden
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WifiConfig_BasicServiceSet) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WifiConfig_BasicServiceSet_AuthOpen)(nil),
		(*WifiConfig_BasicServiceSet_AuthWpa2)(nil),
		(*WifiConfig_BasicServiceSet_AuthWpa3)(nil),
		(*WifiConfig_BasicServiceSet_AuthWpa2Wpa3)(nil),
		(*WifiConfig_BasicServiceSet_AuthRadius)(nil),
	}
}

type WifiConfig_Network struct {
	Ipv4                 string                        `protobuf:"bytes,1003,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	BasicServiceSets     []*WifiConfig_BasicServiceSet `protobuf:"bytes,1007,rep,name=basic_service_sets,json=basicServiceSets,proto3" json:"basic_service_sets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *WifiConfig_Network) Reset()         { *m = WifiConfig_Network{} }
func (m *WifiConfig_Network) String() string { return proto.CompactTextString(m) }
func (*WifiConfig_Network) ProtoMessage()    {}
func (*WifiConfig_Network) Descriptor() ([]byte, []int) {
	return fileDescriptor_63938ee7483f9ada, []int{1, 3}
}

func (m *WifiConfig_Network) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WifiConfig_Network.Unmarshal(m, b)
}
func (m *WifiConfig_Network) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WifiConfig_Network.Marshal(b, m, deterministic)
}
func (m *WifiConfig_Network) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WifiConfig_Network.Merge(m, src)
}
func (m *WifiConfig_Network) XXX_Size() int {
	return xxx_messageInfo_WifiConfig_Network.Size(m)
}
func (m *WifiConfig_Network) XXX_DiscardUnknown() {
	xxx_messageInfo_WifiConfig_Network.DiscardUnknown(m)
}

var xxx_messageInfo_WifiConfig_Network proto.InternalMessageInfo

func (m *WifiConfig_Network) GetIpv4() string {
	if m != nil {
		return m.Ipv4
	}
	return ""
}

func (m *WifiConfig_Network) GetBasicServiceSets() []*WifiConfig_BasicServiceSet {
	if m != nil {
		return m.BasicServiceSets
	}
	return nil
}

type AuthOpen struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthOpen) Reset()         { *m = AuthOpen{} }
func (m *AuthOpen) String() string { return proto.CompactTextString(m) }
func (*AuthOpen) ProtoMessage()    {}
func (*AuthOpen) Descriptor() ([]byte, []int) {
	return fileDescriptor_63938ee7483f9ada, []int{2}
}

func (m *AuthOpen) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthOpen.Unmarshal(m, b)
}
func (m *AuthOpen) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthOpen.Marshal(b, m, deterministic)
}
func (m *AuthOpen) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthOpen.Merge(m, src)
}
func (m *AuthOpen) XXX_Size() int {
	return xxx_messageInfo_AuthOpen.Size(m)
}
func (m *AuthOpen) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthOpen.DiscardUnknown(m)
}

var xxx_messageInfo_AuthOpen proto.InternalMessageInfo

type AuthWpa2 struct {
	Password             string   `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthWpa2) Reset()         { *m = AuthWpa2{} }
func (m *AuthWpa2) String() string { return proto.CompactTextString(m) }
func (*AuthWpa2) ProtoMessage()    {}
func (*AuthWpa2) Descriptor() ([]byte, []int) {
	return fileDescriptor_63938ee7483f9ada, []int{3}
}

func (m *AuthWpa2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthWpa2.Unmarshal(m, b)
}
func (m *AuthWpa2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthWpa2.Marshal(b, m, deterministic)
}
func (m *AuthWpa2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthWpa2.Merge(m, src)
}
func (m *AuthWpa2) XXX_Size() int {
	return xxx_messageInfo_AuthWpa2.Size(m)
}
func (m *AuthWpa2) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthWpa2.DiscardUnknown(m)
}

var xxx_messageInfo_AuthWpa2 proto.InternalMessageInfo

func (m *AuthWpa2) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type AuthWpa3 struct {
	Password             string   `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthWpa3) Reset()         { *m = AuthWpa3{} }
func (m *AuthWpa3) String() string { return proto.CompactTextString(m) }
func (*AuthWpa3) ProtoMessage()    {}
func (*AuthWpa3) Descriptor() ([]byte, []int) {
	return fileDescriptor_63938ee7483f9ada, []int{4}
}

func (m *AuthWpa3) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthWpa3.Unmarshal(m, b)
}
func (m *AuthWpa3) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthWpa3.Marshal(b, m, deterministic)
}
func (m *AuthWpa3) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthWpa3.Merge(m, src)
}
func (m *AuthWpa3) XXX_Size() int {
	return xxx_messageInfo_AuthWpa3.Size(m)
}
func (m *AuthWpa3) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthWpa3.DiscardUnknown(m)
}

var xxx_messageInfo_AuthWpa3 proto.InternalMessageInfo

func (m *AuthWpa3) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type AuthWpa2Wpa3 struct {
	Password             string   `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthWpa2Wpa3) Reset()         { *m = AuthWpa2Wpa3{} }
func (m *AuthWpa2Wpa3) String() string { return proto.CompactTextString(m) }
func (*AuthWpa2Wpa3) ProtoMessage()    {}
func (*AuthWpa2Wpa3) Descriptor() ([]byte, []int) {
	return fileDescriptor_63938ee7483f9ada, []int{5}
}

func (m *AuthWpa2Wpa3) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthWpa2Wpa3.Unmarshal(m, b)
}
func (m *AuthWpa2Wpa3) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthWpa2Wpa3.Marshal(b, m, deterministic)
}
func (m *AuthWpa2Wpa3) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthWpa2Wpa3.Merge(m, src)
}
func (m *AuthWpa2Wpa3) XXX_Size() int {
	return xxx_messageInfo_AuthWpa2Wpa3.Size(m)
}
func (m *AuthWpa2Wpa3) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthWpa2Wpa3.DiscardUnknown(m)
}

var xxx_messageInfo_AuthWpa2Wpa3 proto.InternalMessageInfo

func (m *AuthWpa2Wpa3) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type AuthRadius struct {
	Server               string   `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	ServerCa             string   `protobuf:"bytes,3,opt,name=server_ca,json=serverCa,proto3" json:"server_ca,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthRadius) Reset()         { *m = AuthRadius{} }
func (m *AuthRadius) String() string { return proto.CompactTextString(m) }
func (*AuthRadius) ProtoMessage()    {}
func (*AuthRadius) Descriptor() ([]byte, []int) {
	return fileDescriptor_63938ee7483f9ada, []int{6}
}

func (m *AuthRadius) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthRadius.Unmarshal(m, b)
}
func (m *AuthRadius) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthRadius.Marshal(b, m, deterministic)
}
func (m *AuthRadius) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthRadius.Merge(m, src)
}
func (m *AuthRadius) XXX_Size() int {
	return xxx_messageInfo_AuthRadius.Size(m)
}
func (m *AuthRadius) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthRadius.DiscardUnknown(m)
}

var xxx_messageInfo_AuthRadius proto.InternalMessageInfo

func (m *AuthRadius) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *AuthRadius) GetServerCa() string {
	if m != nil {
		return m.ServerCa
	}
	return ""
}

func (m *AuthRadius) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func init() {
	proto.RegisterEnum("SpaceX.API.Device.MeshAuth", MeshAuth_name, MeshAuth_value)
	proto.RegisterEnum("SpaceX.API.Device.WifiConfig_Security", WifiConfig_Security_name, WifiConfig_Security_value)
	proto.RegisterEnum("SpaceX.API.Device.WifiConfig_Band", WifiConfig_Band_name, WifiConfig_Band_value)
	proto.RegisterEnum("SpaceX.API.Device.WifiConfig_WirelessMode", WifiConfig_WirelessMode_name, WifiConfig_WirelessMode_value)
	proto.RegisterEnum("SpaceX.API.Device.WifiConfig_HTBandwidth", WifiConfig_HTBandwidth_name, WifiConfig_HTBandwidth_value)
	proto.RegisterEnum("SpaceX.API.Device.WifiConfig_VHTBandwidth", WifiConfig_VHTBandwidth_name, WifiConfig_VHTBandwidth_value)
	proto.RegisterType((*MeshConfig)(nil), "SpaceX.API.Device.MeshConfig")
	proto.RegisterType((*WifiConfig)(nil), "SpaceX.API.Device.WifiConfig")
	proto.RegisterMapType((map[string]*MeshConfig)(nil), "SpaceX.API.Device.WifiConfig.MeshConfigsEntry")
	proto.RegisterMapType((map[string]*MeshConfig)(nil), "SpaceX.API.Device.WifiConfig.MeshConfigsUpdatesEntry")
	proto.RegisterType((*WifiConfig_BasicServiceSet)(nil), "SpaceX.API.Device.WifiConfig.BasicServiceSet")
	proto.RegisterType((*WifiConfig_Network)(nil), "SpaceX.API.Device.WifiConfig.Network")
	proto.RegisterType((*AuthOpen)(nil), "SpaceX.API.Device.AuthOpen")
	proto.RegisterType((*AuthWpa2)(nil), "SpaceX.API.Device.AuthWpa2")
	proto.RegisterType((*AuthWpa3)(nil), "SpaceX.API.Device.AuthWpa3")
	proto.RegisterType((*AuthWpa2Wpa3)(nil), "SpaceX.API.Device.AuthWpa2Wpa3")
	proto.RegisterType((*AuthRadius)(nil), "SpaceX.API.Device.AuthRadius")
}

func init() {
	proto.RegisterFile("spacex/api/device/wifi_config.proto", fileDescriptor_63938ee7483f9ada)
}

var fileDescriptor_63938ee7483f9ada = []byte{
	// 2132 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x5b, 0x53, 0x1b, 0xc9,
	0x15, 0xb6, 0x60, 0xd0, 0x34, 0x47, 0x02, 0x35, 0xcd, 0x6d, 0x8c, 0x8d, 0x91, 0xe5, 0xd8, 0x8b,
	0x59, 0x1b, 0x6c, 0x30, 0x1b, 0xef, 0xe6, 0x21, 0x25, 0x81, 0x6c, 0x31, 0x06, 0xe1, 0x8c, 0xc0,
	0x38, 0xae, 0x6c, 0x4d, 0x0d, 0x9a, 0x61, 0x35, 0x65, 0x69, 0x46, 0xa5, 0x19, 0x20, 0xe4, 0x2d,
	0x79, 0x49, 0xe5, 0x31, 0x79, 0x8d, 0x77, 0x93, 0xcd, 0xf5, 0x25, 0x7f, 0x20, 0x2f, 0xf9, 0x05,
	0x49, 0x55, 0x7c, 0xdb, 0xcb, 0x0f, 0x48, 0x55, 0x7c, 0x5b, 0xef, 0xdd, 0x9b, 0x87, 0xa4, 0x52,
	0xdd, 0x3d, 0x33, 0x6a, 0x21, 0xd0, 0xba, 0x6a, 0xf7, 0xe9, 0xf4, 0x39, 0xe7, 0x3b, 0x5f, 0x9f,
	0xee, 0x3e, 0x7d, 0x99, 0x81, 0x53, 0x5e, 0xdd, 0x28, 0x5b, 0x3f, 0x9e, 0x31, 0xea, 0xf6, 0x8c,
	0x69, 0xed, 0xd8, 0x65, 0x6b, 0x66, 0xd7, 0xde, 0xb2, 0xf5, 0xb2, 0xeb, 0x6c, 0xd9, 0x6f, 0x4d,
	0xd7, 0x1b, 0xae, 0xef, 0x92, 0x81, 0x12, 0x05, 0xdd, 0x9c, 0xce, 0x5e, 0x5f, 0x9a, 0x5e, 0x64,
	0xa0, 0xb1, 0x89, 0xf6, 0xb8, 0xb2, 0x5b, 0xab, 0x19, 0x8e, 0xc9, 0x63, 0xc6, 0x4e, 0x1c, 0x0c,
	0x70, 0x1d, 0xee, 0xcf, 0xfc, 0xac, 0x0b, 0x60, 0xc5, 0xf2, 0x2a, 0x0b, 0xac, 0x23, 0x72, 0x12,
	0x92, 0xa6, 0xed, 0xd5, 0xab, 0xc6, 0x9e, 0xee, 0x18, 0x35, 0x4b, 0x89, 0xa5, 0x63, 0x93, 0xbd,
	0x5a, 0x22, 0xb0, 0x15, 0x8d, 0x9a, 0x45, 0xce, 0x01, 0x31, 0xea, 0xf5, 0xea, 0x9e, 0xde, 0x02,
	0xec, 0x4a, 0xc7, 0x26, 0x91, 0x86, 0x99, 0x67, 0x51, 0x40, 0xcf, 0x80, 0x64, 0x6c, 0xfb, 0x15,
	0xa5, 0x3b, 0x1d, 0x9b, 0xec, 0x9f, 0x3d, 0x36, 0xdd, 0x36, 0x84, 0x69, 0xda, 0x7b, 0x76, 0xdb,
	0xaf, 0x68, 0x0c, 0x48, 0xc6, 0x01, 0x38, 0x3d, 0x0b, 0x93, 0x18, 0x6d, 0x2f, 0xb3, 0x50, 0x10,
	0x39, 0x0d, 0xfd, 0x55, 0xc3, 0xf3, 0xe9, 0xc4, 0x38, 0x56, 0xd9, 0xb7, 0x4c, 0xa5, 0x27, 0x1d,
	0x9b, 0xec, 0xd6, 0xfa, 0xa8, 0x75, 0x21, 0x34, 0x92, 0x34, 0x24, 0x6c, 0xa7, 0x6c, 0x34, 0x1c,
	0xc3, 0xb7, 0x5d, 0x47, 0x91, 0xd3, 0xb1, 0x49, 0x49, 0x13, 0x4d, 0xaa, 0x84, 0xe2, 0x58, 0x56,
	0x25, 0x84, 0x70, 0x6f, 0xe6, 0xa7, 0xa7, 0x00, 0x36, 0xec, 0x2d, 0xbb, 0x39, 0x09, 0x65, 0x77,
	0xdb, 0xf1, 0x1b, 0x7b, 0x7a, 0xd9, 0x35, 0x2d, 0x96, 0x7b, 0xaf, 0x96, 0x08, 0x6c, 0x0b, 0xae,
	0x69, 0xd1, 0x34, 0x3c, 0xcb, 0xdf, 0xae, 0xeb, 0x65, 0xb7, 0x56, 0xaf, 0x5a, 0xbe, 0xc5, 0xba,
	0x40, 0x5a, 0x1f, 0xb3, 0x2e, 0x04, 0x46, 0x72, 0x11, 0x86, 0xf8, 0x60, 0xf6, 0x81, 0x3f, 0xe5,
	0x68, 0x3e, 0x91, 0xa5, 0x96, 0x10, 0x05, 0xe4, 0x1d, 0xab, 0xe1, 0xd1, 0xac, 0x7b, 0xd3, 0xb1,
	0xc9, 0x3e, 0x2d, 0x54, 0xc9, 0x31, 0x90, 0x6b, 0x46, 0x59, 0xdf, 0x35, 0x1c, 0x25, 0x49, 0x33,
	0xca, 0x75, 0x29, 0x31, 0x2d, 0x5e, 0x33, 0xca, 0x1b, 0x46, 0xe4, 0xac, 0x1a, 0x8e, 0xd2, 0xd7,
	0xe2, 0x5c, 0x36, 0x1c, 0x36, 0xa0, 0x8a, 0xe1, 0x38, 0x56, 0x55, 0x9f, 0x7d, 0xab, 0xf2, 0x13,
	0x65, 0x90, 0x11, 0x27, 0x02, 0x1b, 0x35, 0x91, 0xf3, 0xe1, 0xaa, 0xb6, 0x00, 0xbf, 0x90, 0x85,
	0x65, 0x5d, 0x10, 0xe0, 0x02, 0xe3, 0x3c, 0x05, 0x0e, 0xb5, 0x30, 0xce, 0x1f, 0xc8, 0xc8, 0x80,
	0x5f, 0x1e, 0xc0, 0xc8, 0xe0, 0x3f, 0x80, 0x64, 0xcd, 0xf2, 0x2a, 0x41, 0xc5, 0x7b, 0xca, 0xc9,
	0x74, 0xf7, 0x64, 0x62, 0x76, 0xfa, 0x80, 0x82, 0x69, 0xae, 0xd4, 0x74, 0xb3, 0x72, 0xbd, 0x3c,
	0x5d, 0x1b, 0x2d, 0x51, 0x6b, 0x5a, 0x48, 0x05, 0x86, 0x44, 0x4a, 0x7d, 0xbb, 0x6e, 0x1a, 0xbe,
	0xe5, 0x29, 0x1f, 0x8e, 0x32, 0xee, 0xf9, 0x97, 0xe6, 0x5e, 0xe7, 0x81, 0xbc, 0x0b, 0x52, 0x6b,
	0x73, 0x34, 0xc7, 0xda, 0x32, 0x84, 0x5f, 0x20, 0x61, 0xac, 0x02, 0x1d, 0xf9, 0x3e, 0x24, 0xcd,
	0x3d, 0xc7, 0xa8, 0xd9, 0x65, 0xfd, 0xb6, 0xb5, 0xe7, 0x29, 0x23, 0x2c, 0x9f, 0xe3, 0x07, 0xe4,
	0x73, 0x7d, 0x7b, 0xb3, 0x6a, 0x97, 0xaf, 0x59, 0x7b, 0x5a, 0x22, 0x88, 0xb8, 0x66, 0xed, 0x79,
	0xc2, 0x1e, 0x14, 0x69, 0x5e, 0x11, 0xf7, 0xa0, 0x80, 0x9e, 0x80, 0x84, 0xed, 0xe9, 0x0d, 0xab,
	0x6e, 0x19, 0xbe, 0xd5, 0x50, 0x46, 0x19, 0x0c, 0x6c, 0x4f, 0x0b, 0x2c, 0xe4, 0x55, 0x18, 0xe0,
	0x74, 0x22, 0xec, 0xe7, 0x3c, 0xfb, 0x14, 0xf3, 0x2c, 0x35, 0xc1, 0xe3, 0x00, 0x9b, 0xae, 0x4b,
	0x77, 0xe0, 0xb6, 0xe3, 0x2b, 0x63, 0xe9, 0xd8, 0x64, 0x8f, 0xd6, 0x4b, 0x2d, 0x0b, 0xd4, 0x40,
	0x2e, 0x80, 0x44, 0x15, 0xe5, 0xaf, 0xb4, 0x9b, 0xc4, 0x81, 0x3b, 0x3e, 0xe7, 0xba, 0xfe, 0x92,
	0xb3, 0xe5, 0x6a, 0x0c, 0x49, 0xf7, 0x2a, 0x3d, 0x42, 0x3c, 0xab, 0x41, 0x2b, 0x5d, 0x39, 0x91,
	0xee, 0xa6, 0xbb, 0x4d, 0x30, 0x91, 0x73, 0x61, 0x7e, 0x22, 0xee, 0x1d, 0x71, 0x76, 0x8b, 0x02,
	0x7a, 0x02, 0x12, 0x9b, 0x7b, 0x75, 0xc3, 0xf3, 0xf4, 0x1a, 0xdd, 0xbd, 0x13, 0x7c, 0xb8, 0xdc,
	0xb4, 0x42, 0x37, 0x6f, 0x34, 0x5c, 0x11, 0xf6, 0x1b, 0x71, 0xb8, 0xb9, 0x26, 0x78, 0x02, 0x12,
	0xe6, 0x96, 0xa7, 0x5b, 0x8e, 0xb1, 0x59, 0xb5, 0x4c, 0x65, 0x8a, 0xb3, 0x99, 0x5b, 0x5e, 0x9e,
	0x5b, 0x9a, 0x6c, 0x22, 0xec, 0x77, 0x22, 0xdb, 0x62, 0x13, 0x9c, 0x03, 0xe4, 0x58, 0xfe, 0xae,
	0xdb, 0xb8, 0xed, 0x29, 0x7f, 0x47, 0x6c, 0xd9, 0x4f, 0x77, 0x2e, 0xc3, 0x22, 0x87, 0x6b, 0x51,
	0x1c, 0x39, 0x03, 0xfd, 0xc1, 0x6c, 0x84, 0x4c, 0xff, 0xe0, 0xbd, 0xf5, 0xf1, 0xa9, 0x08, 0x71,
	0xa7, 0x21, 0x19, 0x20, 0x84, 0xb3, 0x9c, 0x9d, 0x0b, 0x89, 0xc0, 0xce, 0x4e, 0xe8, 0x8b, 0x61,
	0x2d, 0xb5, 0x80, 0x1f, 0xb1, 0x7d, 0xca, 0xd0, 0x58, 0xa4, 0x65, 0x21, 0xe7, 0x01, 0x87, 0x60,
	0x3a, 0x4f, 0xbb, 0x6e, 0xc3, 0x64, 0x17, 0x00, 0x67, 0x4f, 0x05, 0xbe, 0xeb, 0x81, 0x8b, 0xbc,
	0x0e, 0x23, 0xad, 0x3d, 0x44, 0x41, 0x8f, 0x9b, 0xbd, 0x0c, 0x89, 0xbd, 0x44, 0xa1, 0xe3, 0x80,
	0xaa, 0x86, 0xa3, 0xdb, 0xf5, 0x9d, 0x4b, 0xec, 0xa0, 0xe7, 0x3d, 0xc8, 0x55, 0xc3, 0x59, 0xaa,
	0xef, 0x5c, 0x22, 0x93, 0xe1, 0x54, 0x44, 0xa0, 0xd3, 0x11, 0x61, 0x92, 0x79, 0x96, 0x03, 0xe4,
	0x2a, 0xf4, 0xb1, 0x0b, 0xd5, 0xb3, 0xca, 0xdb, 0x0d, 0xdb, 0xdf, 0x53, 0x80, 0x5d, 0x48, 0x67,
	0x3a, 0x4f, 0x7e, 0x29, 0x40, 0x73, 0x42, 0x4a, 0x10, 0x5a, 0xc8, 0x1c, 0x0c, 0xf2, 0xae, 0x5b,
	0x69, 0x9f, 0x36, 0x47, 0xc4, 0xcb, 0x62, 0x43, 0x0c, 0x9a, 0x86, 0x01, 0x71, 0x96, 0xf9, 0x91,
	0x98, 0x68, 0x9b, 0x39, 0x3a, 0xc9, 0xec, 0x50, 0x7c, 0x03, 0x46, 0xdb, 0xd7, 0x86, 0x47, 0x3d,
	0x3b, 0x64, 0xea, 0xa2, 0xd8, 0x29, 0x18, 0xe0, 0xd5, 0xa8, 0x37, 0xac, 0x9a, 0xeb, 0x5b, 0xba,
	0xe7, 0x55, 0x94, 0x0c, 0x2f, 0x4b, 0xee, 0xd0, 0x98, 0xbd, 0xe4, 0x55, 0xc8, 0x6b, 0x61, 0x3f,
	0xed, 0x11, 0xef, 0xf2, 0xda, 0xe2, 0x7d, 0xe4, 0xf7, 0xc5, 0xcd, 0xc1, 0x08, 0xbb, 0x8d, 0x9b,
	0x78, 0xdd, 0x28, 0x97, 0x2d, 0xcf, 0x53, 0x4e, 0xb1, 0x5b, 0x79, 0x90, 0x7a, 0x23, 0x78, 0x96,
	0xb9, 0xf6, 0xdf, 0xcd, 0xaf, 0xb6, 0xdd, 0xcd, 0xe4, 0x26, 0x90, 0x5d, 0xbb, 0x61, 0x55, 0xad,
	0x60, 0x73, 0xf2, 0xcb, 0xe8, 0x1c, 0x5b, 0xb1, 0xa9, 0xce, 0x2b, 0xb6, 0x11, 0xc4, 0xd1, 0xbd,
	0xab, 0xe1, 0x5d, 0x41, 0x63, 0xf7, 0xd6, 0x65, 0x50, 0xc2, 0x55, 0x6b, 0xe3, 0xff, 0x3d, 0x1f,
	0xe9, 0x70, 0xb0, 0x6c, 0xfb, 0x22, 0xdb, 0x72, 0x62, 0xab, 0x70, 0xfe, 0x9b, 0xe5, 0x34, 0xdf,
	0x21, 0x27, 0xc6, 0xff, 0x87, 0xc3, 0x72, 0x62, 0x91, 0xeb, 0x30, 0x50, 0xf1, 0xf5, 0x4d, 0xc3,
	0x31, 0x77, 0x6d, 0xd3, 0xaf, 0xf0, 0x61, 0x4c, 0xb3, 0x94, 0xce, 0x76, 0x4e, 0xa9, 0xb0, 0x96,
	0x0b, 0xa3, 0xb4, 0x54, 0xc5, 0x8f, 0x14, 0x36, 0xd4, 0xa8, 0x1a, 0xda, 0xc9, 0xff, 0x28, 0x56,
	0x43, 0x61, 0x5f, 0xdc, 0xfe, 0x74, 0xd8, 0x08, 0x66, 0xbe, 0x49, 0x3a, 0xf3, 0x87, 0xa7, 0xc3,
	0xc8, 0xff, 0x74, 0x48, 0x3a, 0x2c, 0x6e, 0x15, 0xfa, 0x76, 0xc4, 0x10, 0xe5, 0xc2, 0xcb, 0x2c,
	0xd6, 0x0d, 0x31, 0x97, 0xe4, 0x8e, 0x90, 0x0c, 0x99, 0x09, 0xb7, 0x7c, 0x2b, 0xed, 0x9f, 0x79,
	0x12, 0x7c, 0xbb, 0xdf, 0x10, 0x02, 0xc6, 0xde, 0x04, 0xbc, 0xff, 0x85, 0x42, 0x30, 0x74, 0xdf,
	0xb6, 0xf6, 0x82, 0x87, 0x35, 0x6d, 0x92, 0x39, 0xe8, 0xd9, 0x31, 0xaa, 0xdb, 0xfc, 0x0d, 0x9d,
	0x98, 0x1d, 0x3f, 0xe4, 0x8d, 0xcc, 0x59, 0x34, 0x8e, 0x7d, 0xa3, 0xeb, 0x72, 0x6c, 0xcc, 0x84,
	0xd1, 0x43, 0x1e, 0x29, 0xdf, 0x66, 0x2f, 0x7f, 0x93, 0x20, 0x95, 0x33, 0x3c, 0xbb, 0x5c, 0xb2,
	0x1a, 0x14, 0x56, 0xb2, 0x7c, 0x32, 0x0c, 0x3d, 0x9b, 0x9e, 0x67, 0x9b, 0xca, 0x13, 0x99, 0xf5,
	0xc0, 0x35, 0x32, 0x08, 0x12, 0xb3, 0x3e, 0xe3, 0x56, 0xa6, 0x90, 0xef, 0x41, 0x2f, 0x7d, 0xca,
	0xeb, 0x6e, 0xdd, 0x72, 0x94, 0xbb, 0xa9, 0x43, 0x5f, 0x05, 0xf4, 0x79, 0xbf, 0x5a, 0xb7, 0x9c,
	0xc2, 0x11, 0x0d, 0x19, 0x41, 0x3b, 0x0a, 0xde, 0xad, 0x1b, 0xb3, 0xca, 0xbd, 0xce, 0xc1, 0x1b,
	0x75, 0x63, 0x36, 0x0c, 0xa6, 0x6d, 0x31, 0x78, 0x4e, 0xb9, 0xff, 0xb5, 0xc1, 0x73, 0x42, 0xf0,
	0x1c, 0x29, 0x40, 0x7f, 0xd4, 0x33, 0x67, 0x78, 0xc0, 0x19, 0x26, 0x3a, 0x74, 0x1f, 0xb0, 0x24,
	0x0d, 0x41, 0x27, 0x59, 0x48, 0x30, 0xa6, 0x86, 0x61, 0xda, 0xdb, 0x9e, 0xf2, 0x30, 0x75, 0xe8,
	0x02, 0xb0, 0xcf, 0x20, 0x86, 0x2a, 0x1c, 0xd1, 0xc0, 0x88, 0x34, 0xf2, 0x5d, 0x90, 0x68, 0xbd,
	0x29, 0x9f, 0xc9, 0xac, 0x84, 0x33, 0x9d, 0x4b, 0x98, 0x16, 0xa0, 0xc6, 0x02, 0xc8, 0x51, 0x90,
	0x4d, 0xdb, 0xa3, 0x87, 0x76, 0xf8, 0x96, 0x0f, 0x75, 0x32, 0x0a, 0xf1, 0x8a, 0x6d, 0x9a, 0x96,
	0xa3, 0xbc, 0xe0, 0x9e, 0x40, 0xcd, 0xc5, 0xf9, 0x27, 0x9b, 0x1a, 0x47, 0xff, 0x96, 0xf1, 0x23,
	0x59, 0x8d, 0xa3, 0x47, 0x32, 0x7e, 0x4c, 0xe5, 0x63, 0x19, 0x3f, 0xa1, 0xf2, 0xa9, 0x8c, 0x9f,
	0x51, 0xf9, 0x91, 0x8c, 0x9f, 0x53, 0xf9, 0xcf, 0x14, 0xbe, 0x9b, 0x52, 0xe3, 0xe8, 0x73, 0x19,
	0x7f, 0x41, 0xf5, 0x2f, 0x65, 0xfc, 0x82, 0xca, 0xaf, 0x64, 0xfc, 0x1f, 0x79, 0xec, 0x2f, 0x31,
	0x90, 0x83, 0xcb, 0x89, 0x56, 0x08, 0xbb, 0xa6, 0x83, 0xba, 0x61, 0x0a, 0xf9, 0x11, 0x90, 0x4d,
	0x5a, 0x60, 0xba, 0xc7, 0x2b, 0x8c, 0x7e, 0x2d, 0x79, 0xca, 0x73, 0x99, 0x3d, 0x8f, 0xce, 0x7f,
	0xdd, 0x58, 0x5b, 0x2a, 0x53, 0xc3, 0x9b, 0xad, 0x06, 0xef, 0x25, 0x86, 0xf1, 0x4c, 0xc6, 0x1f,
	0x45, 0xc3, 0xc9, 0xbc, 0x0e, 0x28, 0xba, 0xaf, 0x13, 0x20, 0xaf, 0x17, 0xaf, 0x15, 0x57, 0x37,
	0x8a, 0xf8, 0x08, 0x41, 0x20, 0x6d, 0x5c, 0xcf, 0xce, 0xe2, 0x58, 0xd0, 0x9a, 0xc3, 0x5d, 0x24,
	0x09, 0x88, 0xda, 0x98, 0xd6, 0x9d, 0xb9, 0x00, 0x12, 0x9d, 0x7b, 0xd2, 0x0f, 0xa0, 0x5d, 0xd1,
	0x9b, 0x91, 0x09, 0x90, 0xb5, 0x2b, 0xfa, 0xec, 0xd5, 0xc2, 0x2d, 0xdc, 0x15, 0x28, 0xf3, 0x54,
	0xe9, 0xc9, 0xfc, 0x2b, 0x06, 0x49, 0xf1, 0x58, 0x27, 0x47, 0x61, 0x78, 0x63, 0x49, 0xcb, 0x2f,
	0xe7, 0x4b, 0x25, 0x7d, 0x65, 0x75, 0x31, 0xaf, 0x2f, 0xe6, 0xaf, 0x64, 0xd7, 0x97, 0xd7, 0xf0,
	0x11, 0x02, 0x10, 0xcf, 0xea, 0xab, 0xc5, 0xe5, 0x1f, 0xe2, 0x18, 0x6d, 0xe7, 0x78, 0xbb, 0x8b,
	0xb6, 0xaf, 0xf2, 0x76, 0x37, 0x6d, 0x17, 0x79, 0x5b, 0x22, 0x7d, 0xd0, 0x9b, 0xd3, 0xaf, 0xea,
	0x2b, 0x4b, 0x37, 0xf3, 0x8b, 0xb8, 0x87, 0xaa, 0x59, 0xbd, 0x18, 0xa8, 0x71, 0xaa, 0x5e, 0x8d,
	0x54, 0x99, 0xa4, 0x20, 0x41, 0xc1, 0xa1, 0x01, 0x91, 0x01, 0xe8, 0xcb, 0xea, 0xd9, 0xa2, 0x9e,
	0x5d, 0x08, 0x4c, 0xbd, 0x14, 0x23, 0x1a, 0x80, 0x10, 0xe8, 0xe7, 0x41, 0xd9, 0x9b, 0x81, 0x2d,
	0x41, 0x86, 0x00, 0x87, 0x71, 0x91, 0x35, 0x99, 0xd1, 0x21, 0x21, 0x9c, 0xab, 0x44, 0x81, 0xa1,
	0xc2, 0x9a, 0x9e, 0xcb, 0x16, 0x17, 0x37, 0x96, 0x16, 0xd7, 0x0a, 0xc2, 0x20, 0x47, 0x61, 0xb0,
	0xc5, 0x33, 0x7b, 0x41, 0x5f, 0x29, 0xdc, 0xc2, 0x31, 0x32, 0x0e, 0x47, 0xf7, 0x3b, 0x56, 0x35,
	0xfd, 0x12, 0x77, 0x77, 0x65, 0xee, 0xc4, 0x20, 0x29, 0x1e, 0xdd, 0x74, 0x22, 0x6f, 0x1c, 0xd2,
	0xc7, 0x18, 0x8c, 0xec, 0x73, 0x2d, 0x95, 0xb2, 0xb9, 0xe5, 0xfc, 0x22, 0x8e, 0xd1, 0xcc, 0x5a,
	0x7d, 0x97, 0x83, 0x1e, 0xda, 0x09, 0x2f, 0xbe, 0xc6, 0x5d, 0xdd, 0x24, 0x0d, 0xc7, 0xdb, 0x82,
	0xae, 0x2f, 0xaf, 0x97, 0xc2, 0x60, 0x49, 0x95, 0x90, 0x84, 0x7b, 0xc4, 0x7f, 0x0e, 0xaa, 0x84,
	0xfa, 0x71, 0x4a, 0x95, 0x50, 0x0a, 0x63, 0x55, 0x42, 0x18, 0x0f, 0xa8, 0x12, 0x1a, 0xc0, 0x44,
	0x95, 0x10, 0xc1, 0x83, 0xaa, 0x84, 0x86, 0xf1, 0x88, 0x2a, 0x21, 0x05, 0x1f, 0x55, 0x25, 0x74,
	0x14, 0x8f, 0xa9, 0x12, 0x3a, 0x86, 0x8f, 0xab, 0x12, 0x3a, 0x8e, 0xc7, 0x55, 0x09, 0x8d, 0xe3,
	0x13, 0xaa, 0x84, 0xd2, 0xf8, 0xa4, 0x2a, 0xa1, 0xef, 0xe0, 0xd3, 0xaa, 0x84, 0xce, 0xe0, 0x57,
	0x54, 0x09, 0x4d, 0xe2, 0xb3, 0xaa, 0x84, 0xce, 0xe2, 0x29, 0x35, 0x8e, 0x9e, 0xc8, 0xf8, 0xa9,
	0xb8, 0x4b, 0x9f, 0xcb, 0xf8, 0x63, 0x2a, 0x3f, 0x96, 0xf1, 0x27, 0x54, 0x7e, 0x22, 0xe3, 0x4f,
	0xa9, 0xfc, 0x4c, 0xc6, 0x9f, 0xcb, 0xc2, 0xee, 0x7d, 0x21, 0xe3, 0xaf, 0xa8, 0xfc, 0xaf, 0x8c,
	0xff, 0x47, 0xe5, 0x2f, 0x11, 0xfe, 0x15, 0x52, 0xe3, 0xe8, 0xd7, 0x08, 0xdf, 0xa1, 0xf2, 0x0e,
	0xc2, 0x6f, 0x53, 0xf9, 0x36, 0xc2, 0xef, 0x50, 0xf9, 0x5b, 0x84, 0xdf, 0xa5, 0xf2, 0x6e, 0x0a,
	0xdf, 0xa3, 0xa7, 0xc0, 0xbd, 0x14, 0xbe, 0x4f, 0xe5, 0xfd, 0x14, 0x7e, 0x40, 0xe5, 0x83, 0x14,
	0x7e, 0x48, 0xe5, 0xc3, 0x14, 0x7e, 0x8f, 0xca, 0xf7, 0x52, 0xf8, 0x7d, 0x2a, 0xdf, 0x4f, 0xe1,
	0x0f, 0xa8, 0xfc, 0x20, 0x85, 0x3f, 0x4c, 0x65, 0x00, 0x50, 0x78, 0x03, 0x64, 0xce, 0xf0, 0x36,
	0x3b, 0xc4, 0xc7, 0x00, 0x45, 0x9f, 0x0b, 0xfc, 0x3a, 0x8b, 0x74, 0x01, 0x37, 0xd7, 0x11, 0x37,
	0x05, 0x49, 0xf1, 0x84, 0xee, 0x88, 0x7d, 0x13, 0xa0, 0x79, 0x0c, 0x93, 0x11, 0x88, 0xf3, 0xcf,
	0xca, 0x00, 0x17, 0x68, 0xe4, 0x18, 0xf4, 0xf2, 0x96, 0x5e, 0x36, 0x82, 0xff, 0x43, 0x88, 0x1b,
	0x16, 0x8c, 0x16, 0xfa, 0xae, 0x56, 0xfa, 0x29, 0x13, 0x50, 0xf8, 0xc3, 0x8b, 0x0c, 0xc3, 0xc0,
	0x4a, 0xbe, 0x54, 0xd0, 0xb3, 0xeb, 0x6b, 0x05, 0xe1, 0xb4, 0x18, 0x80, 0xbe, 0xa6, 0xb9, 0x98,
	0xdf, 0xc0, 0xb1, 0x56, 0xe4, 0x9a, 0xb6, 0x5e, 0x5a, 0xcb, 0x2f, 0xe2, 0x2e, 0xba, 0x59, 0x44,
	0x82, 0xd0, 0xd1, 0x9d, 0x1b, 0xbd, 0x35, 0xcc, 0xff, 0xfb, 0x4d, 0x97, 0xdd, 0x9a, 0xf0, 0xef,
	0x6f, 0x33, 0xce, 0xfe, 0xfa, 0xcd, 0xfd, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x17, 0xcc, 0x63, 0x9a,
	0x70, 0x14, 0x00, 0x00,
}
